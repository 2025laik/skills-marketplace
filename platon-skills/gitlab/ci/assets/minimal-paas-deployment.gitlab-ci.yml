# Minimal GitLab CI/CD configuration for Platon PaaS deployment
# This is a complete, working example for a simple application

include:
  - component: $CI_SERVER_FQDN/platon/ci-components/docker/docker@2
  - component: $CI_SERVER_FQDN/platon/ci-components/imagescan/imagescan@2
  - component: $CI_SERVER_FQDN/platon/ci-components/deploy/deploy@1

variables:
  # REQUIRED: Set these for your application
  KUBE_PROD_DOMAIN: myapp.sikt.no        # Production domain
  KUBE_TEST_ID: myapp                     # Used for staging/review URLs
  HTTP_PORT: '80'                         # Port your app listens on
  REPLICAS: '1'                           # Number of replicas (overridden in production)

stages:
  - build
  - test
  - review
  - staging
  - production

# Build Docker image
build:
  extends: .platon-docker-build
  stage: build

# Scan image for vulnerabilities
imagescan:
  extends: .platon-imagescan
  stage: test

# Deploy to staging (automatic on main branch)
staging:
  extends: .staging
  stage: staging
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - deploy deployment.yaml

# Deploy to production (manual on main branch)
production:
  extends: .production
  stage: production
  variables:
    REPLICAS: "2"  # High availability in production
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - deploy deployment.yaml

# Deploy review app for feature branches
review:
  extends: .review
  stage: review
  script:
    - deploy deployment.yaml
  rules:
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH

# Stop review app (manual)
stop_review:
  extends: .stop_review
  stage: review
